// ********RoostGPT********
// Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_TEST_HASH=getWoeid_32ca391499



// ********RoostGPT********
const request = require('superagent');
const { getWoeid } = require('./trends');

describe('getWoeid', () => {
  let yahooURI;

  beforeAll(() => {
    yahooURI = 'https://query.yahooapis.com/v1/public/yql'; // Assuming this is the correct URI for the Yahoo API
  });

  test('should successfully retrieve the WOEID for a valid place', async () => {
    const place = 'New York';
    const mockResponse = {
      body: {
        query: {
          results: {
            place: {
              woeid: '2459115'
            }
          }
        }
      }
    };

    request.get = jest.fn().mockResolvedValue(mockResponse);

    const response = await getWoeid(place);
    expect(request.get).toHaveBeenCalledWith(yahooURI);
    expect(request.get).toHaveBeenCalledWith(expect.objectContaining({ query: expect.stringContaining(place) }));
    expect(response.body.query.results.place.woeid).toBe('2459115');
  });

  test('should handle the error when the request fails', async () => {
    const place = 'InvalidPlace';
    const mockError = new Error('Request failed');

    request.get = jest.fn().mockRejectedValue(mockError);

    await expect(getWoeid(place)).rejects.toThrow('Request failed');
  });

  test('should return null if the place is not found', async () => {
    const place = 'Atlantis';
    const mockResponse = {
      body: {
        query: {
          results: null
        }
      }
    };

    request.get = jest.fn().mockResolvedValue(mockResponse);

    const response = await getWoeid(place);
    expect(response.body.query.results).toBeNull();
  });
});
