// ********RoostGPT********
// Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview


ROOST_TEST_HASH=getPlaceTrends_688d977ba6



// ********RoostGPT********
const Twitter = require('twitter');
const { getPlaceTrends } = require('./trends');

jest.mock('twitter');

describe('getPlaceTrends', () => {
  const mockTrendsData = [
    {
      trends: [
        { name: '#trend1', url: 'http://example.com/trend1' },
        { name: '#trend2', url: 'http://example.com/trend2' }
      ],
      as_of: '2023-01-01T00:00:00Z',
      created_at: '2023-01-01T00:00:00Z',
      locations: [{ name: 'Worldwide', woeid: 1 }]
    }
  ];

  beforeAll(() => {
    Twitter.mockImplementation(() => ({
      get: jest.fn((endpoint, params) => {
        if (params.id === 1) {
          return Promise.resolve(mockTrendsData);
        } else {
          return Promise.reject(new Error('Invalid WOEID'));
        }
      })
    }));
  });

  test('should return trends data when provided with a valid WOEID', async () => {
    const trends = await getPlaceTrends(1);
    expect(trends).toEqual(mockTrendsData);
  });

  test('should throw an error when provided with an invalid WOEID', async () => {
    await expect(getPlaceTrends(9999)).rejects.toThrow('Invalid WOEID');
  });

  test('should call Twitter.get with the correct endpoint and parameters', async () => {
    const twitterClient = new Twitter();
    await getPlaceTrends(1);
    expect(twitterClient.get).toHaveBeenCalledWith('trends/place', { id: 1 });
  });
});
